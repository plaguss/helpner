title: "Detecting Commands, Arguments and Options in CLI Help messages (Named Entity Recognition)"
description: "TBD"
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "helpner"
  version: "0.0.1"
  dataset: "dataset"
  train: "dataset_train"
  dev: "dataset_dev"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "assets/${vars.dataset}.jsonl"
    description: "JSONL-formatted training data obtained from [`cli-help-maker`](https://github.com/plaguss/cli-help-maker)"

workflows:
  all:
    - split
    - preprocess
    - train
    - evaluate

commands:
  - name: "split"
    help: "Split the .jsonl dataset file contents in train/dev"
    script:
      - "python scripts/split.py assets/v${vars.version}/dataset/${vars.dataset}.jsonl"
    deps:
      - "assets/v${vars.version}/dataset/${vars.dataset}.jsonl"
      - "scripts/split.py"
    outputs:
      - "assets/v${vars.version}/dataset/${vars.train}.jsonl"
      - "assets/v${vars.version}/dataset/${vars.dev}.jsonl"

  - name: "preprocess"
    help: "Convert .jsonl files to .spacy format"
    script:
      - "python scripts/preprocess.py assets/v${vars.version}/dataset/${vars.train}.jsonl corpus/${vars.train}.spacy"
      - "python scripts/preprocess.py assets/v${vars.version}/dataset/${vars.dev}.jsonl corpus/${vars.dev}.spacy"
    deps:
      - "assets/v${vars.version}/dataset/${vars.train}.jsonl"
      - "assets/v${vars.version}/dataset/${vars.dev}.jsonl"
      - "scripts/preprocess.py"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a named entity recognition model on cli help messages"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/${vars.dev}.spacy --output training/metrics.json"
    deps:
      - "corpus/${vars.dev}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: visualize-model
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"I like Adidas shoes.\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"

  - name: "visualize-data"
    help: "Explore the annotated data in an interactive Streamlit app"
    script:
      - "streamlit run scripts/visualize_data.py assets/${vars.train}.jsonl,assets/${vars.dev}.jsonl"
    deps:
      - "scripts/visualize_data.py"
      - "assets/${vars.train}.jsonl"
      - "assets/${vars.dev}.jsonl"